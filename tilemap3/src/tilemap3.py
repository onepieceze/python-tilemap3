# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tilemap3
else:
    import _tilemap3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class TilePixelCoord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vert_tile = property(_tilemap3.TilePixelCoord_vert_tile_get, _tilemap3.TilePixelCoord_vert_tile_set)
    horiz_tile = property(_tilemap3.TilePixelCoord_horiz_tile_get, _tilemap3.TilePixelCoord_horiz_tile_set)
    line = property(_tilemap3.TilePixelCoord_line_get, _tilemap3.TilePixelCoord_line_set)
    samp = property(_tilemap3.TilePixelCoord_samp_get, _tilemap3.TilePixelCoord_samp_set)

    def __init__(self):
        _tilemap3.TilePixelCoord_swiginit(self, _tilemap3.new_TilePixelCoord())
    __swig_destroy__ = _tilemap3.delete_TilePixelCoord

# Register TilePixelCoord in _tilemap3:
_tilemap3.TilePixelCoord_swigregister(TilePixelCoord)

class LatLonCoord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lat = property(_tilemap3.LatLonCoord_lat_get, _tilemap3.LatLonCoord_lat_set)
    lon = property(_tilemap3.LatLonCoord_lon_get, _tilemap3.LatLonCoord_lon_set)

    def __init__(self):
        _tilemap3.LatLonCoord_swiginit(self, _tilemap3.new_LatLonCoord())
    __swig_destroy__ = _tilemap3.delete_LatLonCoord

# Register LatLonCoord in _tilemap3:
_tilemap3.LatLonCoord_swigregister(LatLonCoord)

class GlobalMapCoord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_tilemap3.GlobalMapCoord_x_get, _tilemap3.GlobalMapCoord_x_set)
    y = property(_tilemap3.GlobalMapCoord_y_get, _tilemap3.GlobalMapCoord_y_set)

    def __init__(self):
        _tilemap3.GlobalMapCoord_swiginit(self, _tilemap3.new_GlobalMapCoord())
    __swig_destroy__ = _tilemap3.delete_GlobalMapCoord

# Register GlobalMapCoord in _tilemap3:
_tilemap3.GlobalMapCoord_swigregister(GlobalMapCoord)

class GlobalPixelCoord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    line_global = property(_tilemap3.GlobalPixelCoord_line_global_get, _tilemap3.GlobalPixelCoord_line_global_set)
    samp_global = property(_tilemap3.GlobalPixelCoord_samp_global_get, _tilemap3.GlobalPixelCoord_samp_global_set)

    def __init__(self):
        _tilemap3.GlobalPixelCoord_swiginit(self, _tilemap3.new_GlobalPixelCoord())
    __swig_destroy__ = _tilemap3.delete_GlobalPixelCoord

# Register GlobalPixelCoord in _tilemap3:
_tilemap3.GlobalPixelCoord_swigregister(GlobalPixelCoord)


def To_TilePixelCoordinate(arg1, arg2, arg3, arg4):
    return _tilemap3.To_TilePixelCoordinate(arg1, arg2, arg3, arg4)

def To_LatLonCoordinate(arg1, arg2, arg3, arg4, arg5, arg6):
    return _tilemap3.To_LatLonCoordinate(arg1, arg2, arg3, arg4, arg5, arg6)

def To_GlobalMapCoordinate(arg1, arg2, arg3, arg4):
    return _tilemap3.To_GlobalMapCoordinate(arg1, arg2, arg3, arg4)

def To_GlobalPixelCoordinate(arg1, arg2, arg3, arg4):
    return _tilemap3.To_GlobalPixelCoordinate(arg1, arg2, arg3, arg4)


